[versions]
sonarlint-core = "10.16.0.80296"

sonar-java = "8.9.0.37768"
sonar-javascript = "10.20.0.29356"
sonar-php = "3.43.0.12862"
sonar-python = "4.26.0.19456"
sonar-kotlin = "2.23.0.6359"
sonar-ruby = "1.18.0.234"
sonar-go = "1.19.0.512"
sonar-html = "3.18.0.5605"
sonar-xml = "2.12.0.5749"
sonar-omnisharp = "1.27.0.100294"
sonar-text = "2.21.0.5225"
sonar-iac = "1.43.0.14517"
sonar-cpp = "6.63.0.79828"
sonar-dotnet = "10.6.0.109712"

sonarqube = "4.4.1.3373"

kotlin-plugin = "1.9.25"
intellij-plugin = "1.17.4"
license-plugin = "0.16.1"
artifactory-plugin = "4.33.1"
cyclonedx-plugin = "1.10.0"

commons-lang3 = "3.17.0"
commons-text = "1.12.0"
findbugs-jsr305 = "3.0.2"
junit-bom = "5.11.3"
mockito-kotlin = "5.4.0"
awaitility = "4.2.2"

its-remote = "0.11.23"
its-sonar-scala = "1.8.3.2219"
its-sonar-ws = "8.5.1.38104"

[libraries]
sonarlint-java-client-utils = { module = "org.sonarsource.sonarlint.core:sonarlint-java-client-utils", version.ref = "sonarlint-core" }
sonarlint-rpc-java-client = { module = "org.sonarsource.sonarlint.core:sonarlint-rpc-java-client", version.ref = "sonarlint-core" }
sonarlint-rpc-impl = { module = "org.sonarsource.sonarlint.core:sonarlint-rpc-impl", version.ref = "sonarlint-core" }

sonar-java-symbolic-execution = { module = "org.sonarsource.java:sonar-java-symbolic-execution-plugin", version.ref = "sonar-java" }
sonar-java = { module = "org.sonarsource.java:sonar-java-plugin", version.ref = "sonar-java" }
sonar-javascript = { module = "org.sonarsource.javascript:sonar-javascript-plugin", version.ref = "sonar-javascript" }
sonar-php = { module = "org.sonarsource.php:sonar-php-plugin", version.ref = "sonar-php" }
sonar-python = { module = "org.sonarsource.python:sonar-python-plugin", version.ref = "sonar-python" }
sonar-kotlin = { module = "org.sonarsource.kotlin:sonar-kotlin-plugin", version.ref = "sonar-kotlin" }
sonar-ruby = { module = "org.sonarsource.slang:sonar-ruby-plugin", version.ref = "sonar-ruby" }
sonar-html = { module = "org.sonarsource.html:sonar-html-plugin", version.ref = "sonar-html" }
sonar-xml = { module = "org.sonarsource.xml:sonar-xml-plugin", version.ref = "sonar-xml" }
sonar-omnisharp = { module = "org.sonarsource.sonarlint.omnisharp:sonarlint-omnisharp-plugin", version.ref = "sonar-omnisharp" }
sonar-text = { module = "org.sonarsource.text:sonar-text-plugin", version.ref = "sonar-text" }
sonar-go = { module = "org.sonarsource.go:sonar-go-plugin", version.ref = "sonar-go" }
sonar-iac = { module = "org.sonarsource.iac:sonar-iac-plugin", version.ref = "sonar-iac" }
sonar-cfamily = { module = "com.sonarsource.cpp:sonar-cfamily-plugin", version.ref = "sonar-cpp" }
sonar-dotnet = { module = "org.sonarsource.dotnet:sonar-csharp-plugin", version.ref = "sonar-dotnet" }
sonar-dotnet-enterprise = { module = "com.sonarsource.dotnet:sonar-csharp-enterprise-plugin", version.ref = "sonar-dotnet" }

commons-langs3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang3" }
commons-text = { module = "org.apache.commons:commons-text", version.ref = "commons-text" }
findbugs-jsr305 = { module = "com.google.code.findbugs:jsr305", version.ref = "findbugs-jsr305" }
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit-bom" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }

its-sonar-scala = { module = "org.sonarsource.slang:sonar-scala-plugin", version.ref = "its-sonar-scala" }
its-sonar-ws = { module = "org.sonarsource.sonarqube:sonar-ws", version.ref = "its-sonar-ws" }
its-remote-robot = { module = "com.intellij.remoterobot:remote-robot", version.ref = "its-remote" }
its-remote-fixtures = { module = "com.intellij.remoterobot:remote-fixtures", version.ref = "its-remote" }

[bundles]
# Does not include cfamily and dotnet-enterprise
sonar-analyzers = ["sonar-java", "sonar-java-symbolic-execution", "sonar-javascript", "sonar-php", "sonar-python", "sonar-kotlin", "sonar-ruby", "sonar-html", "sonar-xml", "sonar-omnisharp", "sonar-text", "sonar-go", "sonar-iac", "sonar-dotnet"]
its-remote = ["its-remote-robot", "its-remote-fixtures"]

[plugins]
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin-plugin" }
intellij = { id = "org.jetbrains.intellij", version.ref = "intellij-plugin" }
license = { id = "com.github.hierynomus.license", version.ref = "license-plugin" }
artifactory = { id = "com.jfrog.artifactory", version.ref = "artifactory-plugin" }
cyclonedx = { id = "org.cyclonedx.bom", version.ref = "cyclonedx-plugin" }

sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
