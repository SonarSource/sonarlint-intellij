// Apply common logic to all module build files

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

plugins.withId("org.jetbrains.kotlin.jvm") {
    tasks.matching { task -> task.name.endsWith("KotlinCompile") }.configureEach { task ->
        task.compilerOptions {
            apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_7)
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)
            freeCompilerArgs.addAll(listOf("-opt-in=kotlin.RequiresOptIn"))
            // Performance optimizations
            useK2.set(true)
        }
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    // Disable test task tracking to ensure tests always run
    doNotTrackState("Tests should always run")
    
    // Performance optimizations
    maxParallelForks = 2
    forkEvery = 100
    maxHeapSize = "1g"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations.archives.canBeResolved = true

tasks.cyclonedxBom {
    setIncludeConfigs(List.of("runtimeClasspath"))
    inputs.files(configurations.named("runtimeClasspath").get(), configurations.archives)
    mustRunAfter(getTasksByName("buildPluginBlockmap", true))
}

var bomFile = layout.buildDirectory.file("reports/bom.json")
artifacts.add("archives", bomFile.get().asFile) {
    name = "sonarlint-intellij"
    type = "json"
    classifier = "cyclonedx"
    builtBy("cyclonedxBom")
}

license {
    header = rootProject.file("HEADER")
    mapping(
      Map.of(
        "java", "SLASHSTAR_STYLE",
        "kt", "SLASHSTAR_STYLE",
        "svg", "XML_STYLE",
        "form", "XML_STYLE"
      )
    )
    excludes(List.of("**/*.jar", "**/*.png", "**/README"))
    strictCheck = true
}
